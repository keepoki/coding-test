'''
## 난이도
브론즈-2

## 알고리즘 분류
구현, 문자열

## 문제
알파벳 소문자로만 이루어진 단어 S가 주어진다. 각각의 알파벳에 대해서, 단어에 포함되어 있는
경우에는 처음 등장하는 위치를, 포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.

## 입력
첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.

## 출력
각각의 알파벳에 대해서, a가 처음 등장하는 위치, b가 처음 등장하는 위치, ... z가 처음
등장하는 위치를 공백으로 구분해서 출력한다.

만약, 어떤 알파벳이 단어에 포함되어 있지 않다면 -1을 출력한다. 단어의 첫 번째 글자는
0번째 위치이고, 두 번째 글자는 1번째 위치이다.

## 문제 요약
소문자 알파벳 문자열이 S가 주어지고, a부터 z까지의 알파벳이 S에 해당하면 해당하는
문자열의 인덱스를, 없다면 -1를 각각 출력한다.

## 풀이 과정
1. a부터 z까지의 데이터를 키와 값 쌍의 해시맵에 데이터를 -1로 채워 넣는다.
2. 문자열을 순회하면서 현재 인덱스를 해시맵에 넣는다.
3. 해시맵을 순서대로 출력한다.

## 풀이 요약
문자열을 순회하며 a부터 z까지의 해시맵에 현재 문자를 키로 찾고 현재 인덱스를 해시맵에
삽입하고 해시맵을 순서대로 출력한다.

## 시간 복잡도: O(n), 공간 복잡도: O(n)

## 제출 결과
32412 KB,	44 ms
'''

s = input()
a_to_z = {chr(ord('a') + i): -1 for i in range(ord('z') - ord('a') + 1)}

for i in range(len(s)):
  char = s[i]
  if a_to_z[char] == -1:
    a_to_z[char] = i

print(' '.join(str(value) for value in a_to_z.values()))


